# For detailed documentation, see: .github/docs/sync.yml.md

name: Sync with Upstream

on:
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true # Only one workflow at a time

env:
  SYNC_BRANCH: main
  UPSTREAM_REPO: https://github.com/KhronosGroup/glslang.git
  SYNC_TOKEN: ${{ secrets.SYNC_REPO_TOKEN }}

permissions: read-all

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper merge
          ref: ${{ env.SYNC_BRANCH }}
          token: ${{ secrets.SYNC_REPO_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config merge.conflictstyle diff3  # 3-way merge conflict resolution

      - name: Add and fetch upstream repository
        run: |
          if ! git remote | grep -q '^upstream$'; then
            git remote add upstream ${{ env.UPSTREAM_REPO }}
          fi
          git fetch upstream

      - name: Check if sync needed
        id: check
        run: |
          # Count new commits from common base
          BASE=$(git merge-base HEAD upstream/${{ env.SYNC_BRANCH }})
          UPSTREAM_CHANGES=$(git rev-list --count $BASE..upstream/${{ env.SYNC_BRANCH }})
          if [ "$UPSTREAM_CHANGES" -gt 0 ]; then
              echo "SYNC_NEEDED=true" >> $GITHUB_OUTPUT
          fi

      - name: Log (Check) # Print details to workflow log
        run: |
          BASE=$(git merge-base HEAD upstream/${{ env.SYNC_BRANCH }})

          echo "## Commit Details" >> $GITHUB_STEP_SUMMARY
          echo "Base Commit: ${BASE}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check.outputs.SYNC_NEEDED }}" == "true" ]; then
            echo "***Sync needed - $(git rev-list --count $BASE..upstream/${{ env.SYNC_BRANCH }}) new commits***" >> $GITHUB_STEP_SUMMARY
            echo "#### New Commits" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git log --oneline $BASE..upstream/${{ env.SYNC_BRANCH }} >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "***No sync needed - already up to date***" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Log (Pre-merge) # Print details to workflow log
        if: steps.check.outputs.SYNC_NEEDED == 'true'
        run: |
          echo "## Git Diff" >> $GITHUB_STEP_SUMMARY
          echo '```patch' >> $GITHUB_STEP_SUMMARY
          git format-patch --no-stat --stdout -M HEAD..upstream/${{ env.SYNC_BRANCH }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Merge upstream changes
        if: steps.check.outputs.SYNC_NEEDED == 'true'
        id: merge
        run: |
          git merge upstream/${{ env.SYNC_BRANCH }} \
            -m "Sync fork branch with upstream branch" \
            -m "Merge upstream branch '${{ env.SYNC_BRANCH }}' into fork branch '${{ env.SYNC_BRANCH }}'" || {
            echo "MERGE_CONFLICT=true" >> $GITHUB_OUTPUT
            exit 0
          } # Wrap to explicitly set exit code of script as 0 in case of git merge fail

      - name: Resolve merge conflicts
        if: steps.merge.outputs.MERGE_CONFLICT == 'true'
        run: |
          git merge --abort
          git merge -X theirs upstream/${{ env.SYNC_BRANCH }} \
            -m "Resolve sync conflicts preferring upstream changes" \
            -m "Merge upstream branch '${{ env.SYNC_BRANCH }}' into fork branch '${{ env.SYNC_BRANCH }}' using '-X theirs'"

      - name: Log (Post-merge) # Print details to workflow log
        if: steps.merge.outputs.MERGE_CONFLICT == 'true' || steps.check.outputs.SYNC_NEEDED == 'true'
        run: |
          echo "## Git Status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git status -uno >> $GITHUB_STEP_SUMMARY
          git branch -v >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Push changes
        if: steps.check.outputs.SYNC_NEEDED == 'true'
        run: |
          git push origin ${{ env.SYNC_BRANCH }} ||
          (git pull --rebase origin ${{ env.SYNC_BRANCH }} && git push origin ${{ env.SYNC_BRANCH }})

      - name: Notify failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = '⚠️ Sync with Upstream Failed';
            const issueBody = `
              ***The sync with the upstream repository failed.***

              ### Sync Failure Report
              - **Workflow:** ${context.workflow}
              - **Job:** ${context.job}
              - **Run ID:** ${context.runId}
              - **Run Number:** ${context.runNumber}
              - **Commit:** ${context.sha.slice(0,8)}

              *Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/\
              ${context.repo.repo}/actions/runs/${context.runId}) for further details.*
            `;

            try {
              const issues = await github.rest.issues.listForRepo({
                ...context.repo,
                state: 'open',
                labels: ['sync', 'bot'],
                per_page: 1
              });

              if (issues.data.length === 0) {
                await github.rest.issues.create({
                  ...context.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['sync', 'bot']
                });
              } else {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: issues.data[0].number,
                  body: issueBody
                });
              }
            } catch (error) {
              core.setFailed(
                `Failed to create/update sync bot issue and notify about sync failure: ${error.message}`
              );
            }
